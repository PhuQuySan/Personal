// src/app/dashboard/page.tsx
// üåü SERVER COMPONENT üåü

import { createServer } from '@/lib/supabase/server';
import { cookies } from 'next/headers';
import { redirect } from 'next/navigation';
import DashboardClient from '@/components/DashboardClient';
import { User } from '@supabase/supabase-js';

// ƒê·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu (Gi·∫£ ƒë·ªãnh n·∫±m trong src/types/index.ts)
interface UserProfile {
    full_name: string | null;
    avatar_url: string | null;
    user_role: 'normal' | 'elite' | 'super_elite' | 'demo';
}

interface UserLink {
    id: number;
    link_name: string;
    link_url: string;
    description: string | null;
}

// D·ªØ li·ªáu Demo
const DEMO_PROFILE: UserProfile = {
    full_name: "Normal User Demo", // Gi·∫£ l·∫≠p Normal m·∫∑c ƒë·ªãnh
    avatar_url: null,
    user_role: "demo",
};

const DEMO_LINKS: UserLink[] = [
    { id: 1, link_name: "Demo Blog Link", link_url: "/blog", description: "Xem c√°c b√†i vi·∫øt m·ªõi nh·∫•t." }
];

/**
 * H√†m l·∫•y d·ªØ li·ªáu Dashboard t·ª´ Supabase ho·∫∑c tr·∫£ v·ªÅ d·ªØ li·ªáu Demo.
 */
async function getDashboardData(user: User, isDemo: boolean) {
    if (isDemo) {
        return { profile: DEMO_PROFILE, links: DEMO_LINKS };
    }

    const supabase = await createServer();

    // 1. L·∫•y Profile (bao g·ªìm user_role)
    const { data: profile } = await supabase
        .from('profiles')
        .select('full_name, avatar_url, user_role')
        .eq('id', user.id)
        .single();

    // 2. L·∫•y Links
    const { data: links } = await supabase
        .from('user_links')
        .select('id, link_name, link_url, description')
        .eq('user_id', user.id)
        .order('id', { ascending: true });

    // ƒê·∫£m b·∫£o profile lu√¥n c√≥ role h·ª£p l·ªá
    const userProfile: UserProfile = (profile as UserProfile) || {
        full_name: user.email,
        avatar_url: null,
        user_role: 'normal'
    };

    return {
        profile: userProfile,
        links: (links as UserLink[]) || [],
    };
}

export default async function DashboardPage() {
    const supabase = await createServer();
    const { data: { user } } = await supabase.auth.getUser();

    // 1. Ki·ªÉm tra session
    if (!user) {
        redirect('/login?error=Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p Dashboard.');
    }

    // 2. Ki·ªÉm tra Demo
    const cookieStore = await cookies();
    const isDemo = !!cookieStore.get('demo-auth-session')?.value;

    // 3. L·∫•y d·ªØ li·ªáu
    const data = await getDashboardData(user, isDemo);

    // 4. Truy·ªÅn d·ªØ li·ªáu v√†o Client Component
    return <DashboardClient initialProfile={data.profile} initialLinks={data.links} />;
}